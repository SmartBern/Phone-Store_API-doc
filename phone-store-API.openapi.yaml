openapi: 3.0.0
info:
  title: Phone Store API
  description: >
    An API for the phone store web app that enables a user to perform CRUD (create, read, update, delete) operations 
    on the store.

    üîê No authentication required.
    
  version: 1.0.0

  contact:
    name: Oluwaseun Lawal
    email: seunlawal030@gmail.com
    url: https://www.oluwaseun-lawal.vercel.com

servers:
   - url: https://phone-store-70k3.onrender.com/api
    description: Production backend server
  - url: http://localhost:5000/api
    description: Development backend server
 

tags:
  - name: Products
    description: Endpoints for operations related to products in the store  

paths:
  /products:
    get:
      tags:
        - Products
      summary: Get all products in the store
      operationId: getProducts
      responses:
        '200':
          description: List of all products with their MongoDB `_id`
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              example:
               - _id: "66d8b6b51b29b8d9404b9c9a"
                 name: "Lenovo Legion"
                 price: 1850
                 image: "https://www.productpix.com/product.jpg"
        '500':
          description: Server error

    post:
      tags:
        - Products
      summary: Create a new product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            example:
              name: "Lenovo Legion"
              price: 1850
              image: "https://www.productpix.com/product.jpg"

      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Provide info for all fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Server error

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a single product by `_id`
      operationId: getProductById
      
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: MongoDB ObjectId (_id) of the product from GET /products response
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              example:
                _id: "66d8b6b51b29b8d9404b9c9a"
                name: "Lenovo Legion"
                price: 1850
                image: "https://www.productpix.com/product.jpg"
        '404':
          description: Product not found
        '500':
          description: Server error
          
    put:
      tags:
        - Products
      summary: Update a product by its MongoDB `_id`
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: MongoDB ObjectId of the product; the `_id` of the product obtained from **GET /products**.
            Example: `66d8b6b51b29b8d9404b9c9b`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Server error

    delete:
      tags:
        - Products
      summary: Delete a product by its MongoDB `_id`
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: MongoDB ObjectId of the product; the `_id` of the product obtained from **GET /products**.
            Example: `66d8b6b51b29b8d9404b9c9d`
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
        '500':
          description: Server error

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB auto-generated ID
          example: "66d8b6b51b29b8d9404b9c9a"
        name:
          type: string
          example: "Motorola Edge 40"
        price:
          type: number
          example: 550
        image: 
          type: string
          example: https://www.productpix.com/product.jpg
        